openapi: 3.0.0
info:
  title: GeoHub API specification
  version: '1.0'
  description: |
    This documentation describes GeoHub's endpoints specification.

    Our core API is `/api/datasets` which allows users to search GeoHub datasets freely. It returns the response as GeoJSON feature collection and looks like similar to STAC response. Once you received the datasets details, you can handle them with our tiling servers. All our datasets are cloud optimised either `COG (Cloud Optimised GeoTiff)` or `PMTiles`.

    ## Raster datasets
    You can use our dynamic rater tiling servers - [titiler](https://titiler.undpgeohub.org/) and [titiler-dev](https://titiler-dev.undpgeohub.org/)

    ## Vector datasets
    Generally, vector tiles can be handled with [maplibre-gl-js](https://maplibre.org/projects/maplibre-gl-js/). But if the dataset's URL starts with `pmtiles://`, you can use [PMTiles Javascript API](https://protomaps.com/docs/frontends/maplibre) to add new protocol to your maplibre.

    ## Community maps API
    You can also get style.json of saved map style through `/api/style` endpoints.

    ## Authentication
    Some endpoints (for `GET`, `POST`, `PUT`, `DELETE` apis) with a padlock icon are required to sign in prior to using them. GeoHub uses either Azure Active Directory or GitHub authentication with Auth.js package. Auth.js package provides the following endpoints to [sign in](/auth/signIn) / [sign out](auth/signout). Please sign in first before trying swagger. If you use these endpoints without signing in, the result from the server might be different.

    Or you can use `token` query param to access with a valid access token for `/api` endpoints which have a padlock icon in swagger. A token can be issued through `/api/token` endpoint after you sign in with SSO. Default expiry time of a token is an hour, if you need a token with longer expiry time, please contact to us.

    ## Issues
    Please feel free to report any issues on GitHub from [here](https://github.com/UNDP-Data/geohub/issues). Or if you have any questions, please create a thread in GitHub's [discussions](https://github.com/UNDP-Data/geohub/discussions) page.
  contact:
    email: jin.igarashi@undp.org
    url: 'https://geohub.data.undp.org'
  license:
    name: BSD-3-Clause license
    url: 'https://github.com/UNDP-Data/geohub/blob/develop/LICENSE'
servers:
  - url: /api
    description: GeoHub APIs
paths:
  /datasets:
    get:
      summary: Datasets search API
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoJSONFeatureCollection'
      operationId: get-datasets
      description: |-
        This API returns the result as GeoJSON feature collection format and it contains links property at the bottom.

        The links will have the following patterns.

        - self = URL for the query itself
        - root = URL origin for this API
        - next = URL for next page
        - previous = URL for previous page

        You can use next or previous links to implement paging feature.

        Flexiblely to search by key/value of tags.

        {key}={value} e.g., sdg_goal=1 to filter where tag key is sdg_goal and value is 1. If multiple key/value are set, it will filter by OR operator. if you want to filter by SDG1 and 2, you can query like '&sdg_goal=1&sdg_goal=2'
      parameters:
        - schema:
            type: string
          in: query
          name: query
          description: 'free text to search in name, description'
        - schema:
            type: string
          in: query
          name: bbox
          description: 'you can filter the data by bounding box (minx, miny, maxx, maxy)'
        - schema:
            type: number
          in: query
          name: limit
          description: The number of datasets retrieved. default is 10
        - schema:
            type: string
          in: query
          name: offset
          description: Offset value for paging. default is 0
        - schema:
            type: string
          in: query
          name: extent
          description: Search by extent value
        - schema:
            type: string
          in: query
          name: granularity
          description: Search by granularity value
        - schema:
            type: string
          in: query
          name: keyword
          description: Search by keyword value
        - schema:
            type: string
            enum:
              - table
              - function
          in: query
          name: layertype
          description: Search by layertype of pg_tileserv
        - schema:
            type: string
          in: query
          name: resolution
          description: Search by resolution value
        - schema:
            type: string
            enum:
              - '1'
              - '2'
              - '3'
              - '4'
              - '5'
              - '6'
              - '7'
              - '8'
              - '9'
              - '10'
              - '11'
              - '12'
              - '13'
              - '14'
              - '15'
              - '16'
              - '17'
          in: query
          name: sdg_goal
          description: search by sdg_goal value
        - schema:
            type: string
          in: query
          name: sdg_target
          description: search by sdg_target value
        - schema:
            type: string
            enum:
              - earth-search
              - microsoft-pc
          in: query
          name: stac
          description: search by stac value
        - schema:
            type: string
          in: query
          name: theme
          description: search by theme value
        - schema:
            type: string
            enum:
              - pgtileserv
              - stac
          in: query
          name: type
          description: search by type value
        - schema:
            type: string
          in: query
          name: year
          description: search by year value
        - schema:
            type: boolean
            default: 'false'
          in: query
          name: staronly
          description: 'if true, only search for favourite datasets'
        - schema:
            type: string
            default: and
            enum:
              - and
              - or
          in: query
          name: queryoperator
          description: operator for query search. convert space to either 'and' or 'or'
        - schema:
            type: string
            default: and
            enum:
              - and
              - or
          in: query
          name: operator
          description: 'operator for tag search. '
        - schema:
            type: boolean
            default: 'false'
            enum:
              - 'true'
              - 'false'
          in: query
          name: mydata
          description: 'if true, only fetch datasets owned by login user'
      tags:
        - datasets
      security:
        - Azure AD authentication: []
        - API access token: []
    post:
      summary: Register a dataset feature to GeoHub
      operationId: post-datasets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoJSONFeature'
      description: |-
        Register a dataset feature to GeoHub. If the dataset is already registered, the endpoint is going to update the dataset.

        Steps to register a dataset through this endpoint

        1.Authenticate to GeoHub

        The endpoint requires to be authenticated. You can sign in to GeoHub through your browser if you use swagger. Otherwise, please use `/api/token` endpoint to generate an access token.

        2.Create body for registration.

        It is basically the same feature of `/api/datasets` endpoint required to pass to POST api. You need to fill all information properly to register a dataset. 

        The below JSON is the basic structure of Feature Object. `type` must be `Feature`, and you need to add coordinates at `geometry` property. Normally, BBOX is used for it.

        ```
        {
          "type": "Feature",
          "geometry": {
            "type": "Polygon",
            "coordinates": [
            ]
          },
          "properties": {
          }
        }
        ```

        In terms of `properties`, the below table shows which property is essential to register.

        | Property | Required | Description |
        |---|---|---|
        | `id` | Y | MD5 Hash key generated from url |
        | `url` | Y | URL of a blob. SAS Token for blob storage access is not needed. If PMTiles, `pmtiles://` protocol is required. |
        | `name` | Y | title of a dataset. |
        | `description` | Y | description of a dataset. Write it as details as possible. |
        | `is_raster` | Y | true: raster dataset, false: vector dataset |
        | `license` | Y | Open data license name |
        | `access_level` | Y | 1: Private, 2: Organization, 3: Public |
        | `createdat` | N | Not required for registration, but required for updating |
        | `created_user` | N | Not required for registration, but required for updating |
        | `updatedat` | N | Not required for registration |
        | `updated_user` | N | Not required for registration |
        | `tags` | Y | See next section for further details |
        | `no_stars` | N | Not required for registration |
        | `permission` | N | Not required for registration |
        | `is_star` | N | Not required for registration |
        | `links` | N | Not required for registration |


        3.Tag registrations

        Particularly, tags are important to identify a dataset. The below table gives you an overview of tags used in GeoHub.

        | key | required | description |
        |---|---|---|
        | `type` | Y | `azure` value is for COG/PMTiles dataset. `pgtileserv` value is needed for pg_tileserv layer. `stac` is required for STAC collection or catalog. |
        | `schema` | N | Only needed for `type=pgtileserv`. Schema name for a dataset|
        | `table ` | N | Only needed for `type=pgtileserv`. Table name for a dataset |
        | `layertype` | N | Only needed for `type=pgtileserv`. either `table` or `function` |
        | `id` | N | Only needed for `type=pgtileserv`. id of pg_tileserv layer |
        | `provider` | Y | at least a provider name is required. You can add many provider tag as you wish. |
        | `extent` | N | If it is global data, `Global` value can be added |
        | `continent` | N | If it is not global data, continent tag like `Africa` is recommended to be added. See `/api/continents` api for available values. |
        | `region` | N | If it is not global data, region tag like `Sub-Saharan Africa` is recommended to be added. See `/api/regions` api for available values. |
        | `country` | N | If it is not global data, country tag like `KEN` is recommended to be added. See `/api/countries` api for available values. You can add many country tag as you wish. |
        | `sdg_goal` | N | If a dataset is related to any SDGs, the number like `1` for poverty can be added. You can add many sdg_goal tag as you wish. |
        | `unit` | N | If raster dataset, unit tag is recommended to be added. |
        | `year` | N | If applicable, `year` tag can be added. |
        | `resolution` | N | If applicable, `resolution` tag can be added. |


        For STAC collection's registration, it is recommended to use STAC management tool in GeoHub. Tags required for STAC are not covered by the above table.

        For pg_tileserv registration/deletion, it is also recommended to use pg_tileserv layer management tool in GeoHub.

        The best way to know which tags are essential for a dataset is to search a dataset in GeoHub. The below is an example dataset URLs for each type of a dataset.

        - [Raster dataset (COG)](/api/datasets/241c5b17f396f114ad6f9063d07762b8)
        - [Vector dataset (PMTiles)](/api/datasets/196af310ffb45117cb4f091fa5d98705)
        - [Vector dataset (pg_tileserv)](/api/datasets/320cf4ffcf6414a68b428f14a5728053)
        - [STAC Collection (Catalog)](/api/datasets/351155bfc6f45c2ae47e7cbb4f439a47)
        - [STAC Catalog (Catalog)](/api/datasets/e696b278429ed1ee0579e6257df1ca59)
        - [STAC Collection (API)](/api/datasets/c47e79d248510ba2d397b76972eb8a83)

        4.Register a dataset with access token

        Once you have made all properties required for your dataset, you can use the following template command to register your dataset into the database.

        ```
        curl -X 'POST' \
          'https://geohub.data.undp.org/api/datasets?token={your generated token}' \
          -H 'accept: application/json' \
          -H 'Content-Type: application/json' \
          -d '{
          "type": "string",
          "geometry": {
            "type": "string",
            "coordinates": [
            ]
          },
          "properties": {
            "id": "string",
            "url": "string",
            "name": "string",
            "description": "string",
            "is_raster": true,
            "license": "string",
            "access_level": 0,
            "tags": [
              {
                "key": "type",
                "value": "azure"
              }
            ]
          }
        }'
        ```
      security:
        - Azure AD authentication: []
        - API access token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeoJSONFeature'
      tags:
        - datasets
  '/datasets/style/{layer}/{type}':
    parameters:
      - $ref: '#/components/parameters/maplibre_layer_type'
      - $ref: '#/components/parameters/maplibre_layer_id'
    post:
      summary: Create default layer style for unregistered dataset
      operationId: post-datasets-style-layer-type
      responses:
        '200':
          description: OK
      description: 'This endpoint is to return the default layer style for the dataset which is not registered to the database yet. The response is equivalent to the `/datasets/{id}/style/{layer}/{type}` API. But DatasetFeature object should be in body of POST request.'
      parameters:
        - schema:
            type: string
          in: query
          name: colormap_name
          description: 'Option. If specified, use this colormap to create layer style'
        - schema:
            type: string
          in: query
          name: algorithm
          description: Option. Algorithm ID for raster
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                feature:
                  $ref: '#/components/schemas/GeoJSONFeature'
        description: Dataset feature object
      tags:
        - datasets
      security:
        - Azure AD authentication: []
        - API access token: []
  '/datasets/{id}':
    parameters:
      - $ref: '#/components/parameters/dataset_id'
    get:
      summary: Get dataset feature by ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoJSONFeature'
      operationId: get-datasets-id
      description: get dataset feature by dataset ID
      tags:
        - datasets
      security:
        - Azure AD authentication: []
        - API access token: []
    delete:
      summary: Delete dataset by ID
      operationId: delete-datasets-id
      responses:
        '200':
          description: OK
      description: Delete dataset feature by dataset ID. This endpoint is required to sign in.
      tags:
        - datasets
      security:
        - Azure AD authentication: []
        - API access token: []
  '/datasets/{id}/table/layers/{layer}.{format}':
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Dataset ID
      - schema:
          type: string
        name: layer
        in: path
        required: true
        description: a layer ID. This should be equivalent to maplibre's source layer ID.
      - schema:
          type: string
          default: json
          enum:
            - json
            - csv
            - geojson
            - xlsx
        name: format
        in: path
        required: true
        description: 'Table format either json or csv or geojson or xlsx. default is json. '
    get:
      summary: Query attribute table for a layer
      tags:
        - datasets
      responses:
        '200':
          description: |-
            OK

            Attribute table data according to the format specifed in query param.

            If format is either json or geojson, it returns links and pages properties. If it is csv, it returns text/csv file. If json is selected as format, it omit geometry property from geojson.
          content:
            application/json:
              schema:
                type: object
                properties:
                  features:
                    type: array
                    x-stoplight:
                      id: dh8mjwf83l64t
                    items:
                      $ref: '#/components/schemas/GeoJSONFeature'
                  links:
                    type: array
                    x-stoplight:
                      id: w14b5l3y47id2
                    items:
                      $ref: '#/components/schemas/Link'
                  pages:
                    type: object
                    x-stoplight:
                      id: tygpber41ki1g
                    properties:
                      totalCount:
                        type: integer
                        x-stoplight:
                          id: cmol4zimxjoyq
                      totalPages:
                        type: integer
                        x-stoplight:
                          id: f4uftw55r0u46
                      currentPage:
                        type: integer
                        x-stoplight:
                          id: fc7aq09023798
        '400':
          description: |-
            Bad Request

            It returns 400 error in the following conditions:

            - If it is a raster layer
            - If layer does not exist in vector tiles
            - If bbox text does not align with minx, miny, maxx, maxy format
            - If format is invalid format
            - If limit or offset are not number
            - If sortby is wrong format, or specify the wrong field name
        '404':
          description: |-
            Not Found

            It returns 404 error in the following conditions:

            - If no dataset exists in the ID specifed
            - If no flatgeobuf exists to the dataset
          headers: {}
      operationId: get-datasets-id-attributes-layer
      description: |-
        This endpoint is to provide a capability to query attribute table for a vector layer. Currently, it is not available for raster layer.

        `query` param is to scan all properties to return any matched features. If you want to filter by specific columns, please use `cql_filter` instead.

        Use `cql_filter` to filter by advanced search. `cql_filter` only supports the following operators:

        `EQUAL TO [ = ]`, `LESS THAN [ < ]`, `LESS THAN OR EQUAL TO [ <= ]`, `GREATER THAN [ > ]`, `GREATER THAN OR EQUAL TO [ >= ]`, `IS NULL`, `LIKE`, `IN`, `NOT IN`, `BETWEEN aaa AND bbb`, `NOT [ <> ]`

        each condition can be concatenated by either `AND`, `OR`. operators should be capital letters.

        The below are examples of cql_filter for each operator.

        - `type_of_facility = 'Primary School'`
        - `student_number < 714`
        - `student_number <= 714`
        - `student_number > 782`
        - `student_number >= 782`
        - `condition IS NULL`
        - `facility_name LIKE EP`
        - `type_of_facility IN ('Primary School')`, `type_of_facility IN ('Primary School', 'Secondary School')`
        - `student_number NOT IN (701, 782)`
        - `student_number BETWEEN 600 AND 800`, `student_number BETWEEN 600 AND 800 AND type_of_facility = Secondary school`
        - `availability <> 'Regularly'`
      security:
        - Azure AD authentication: []
        - API access token: []
      parameters:
        - schema:
            type: string
          in: query
          name: query
          description: optional. text to query attribute table.
        - schema:
            type: integer
            default: 1000
          in: query
          description: optional. default is 1000.
          name: limit
        - schema:
            type: integer
            default: 0
          in: query
          name: offset
          description: optional. default is 0. Use it for pagination
        - schema:
            type: string
          in: query
          name: bbox
          description: 'optional. bbox (minx, miny, maxx, maxy) for filtering by geospatial extent. default is from metadata json'
        - schema:
            type: string
          in: query
          name: sortby
          description: 'optional. sorting column. format should be `{field name},{asc|desc}`'
        - schema:
            type: string
          in: query
          name: cql_filter
          description: optional. CQL filter to search data
        - schema:
            type: boolean
            default: 'false'
          in: query
          name: compress
          description: 'optional. default is false. If true, compress response as gzip using compress api. Only available for either json or geojson format.'
  '/datasets/{id}/style/{layer}/{type}':
    parameters:
      - $ref: '#/components/parameters/dataset_id'
      - $ref: '#/components/parameters/maplibre_layer_type'
      - $ref: '#/components/parameters/maplibre_layer_id'
    get:
      summary: Get default layer style for a dataset
      tags:
        - datasets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetLayerStyle'
        '404':
          description: Not Found
        '':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  dataset_id:
                    type: string
                  layer_type:
                    type: string
                  source:
                    type: string
                    description: JSON object for maplibre source
      operationId: get-datasets-id-style
      description: |-
        This endpoint is to return the default layer style for specified dataset if the style infomation is registered in the database.

        This endpoint's response contains two variables which are `style.id={layer_id}` and `style.source={source_id}`. When you use this default style in maplibre, please generate unique layer ID and soruce ID, then replace them before adding layer to maplibre.

        If the style is not registered in the database yet, the endpoint will create style randomly.

        **This endpoint might be restricted by the access level of the dataset**
      security:
        - Azure AD authentication: []
        - API access token: []
      parameters:
        - schema:
            type: string
          in: query
          name: colormap_name
          description: 'Option. If specified, use this colormap to create layer style'
    post:
      summary: Register default layer style for a dataset
      operationId: post-datasets-id-style-type
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetLayerStyle'
      description: |-
        This endpoint is to register the default layer style for specified dataset.

        This endpoint will replace `style.id` to `style.id={layer_id}` and `style.source` to `style.source={source_id}`. When you use this default style in maplibre, please generate unique layer ID and soruce ID, then replace them before adding layer to maplibre.

        **This endpoint only can be used by the dataset owner or super user.**
      tags:
        - datasets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetLayerStyle'
            examples:
              Example for vector:
                value:
                  dataset_id: 8c4810867c50ee006b11abf19876a750
                  layer_id: drr.dynamic_subnational_hhr
                  layer_type: fill
                  source:
                    type: vector
                    url: 'https://dev.undpgeohub.org/api/vector/pgtileserv/tile.json?table=drr.dynamic_subnational_hhr&type=function'
                    tiles:
                      - 'https://pgtileserv.undpgeohub.org/drr.dynamic_subnational_hhr/{z}/{x}/{y}.pbf?params={"hdi_adjustment"%3A{"value"%3A5.4}%2C"working_age_pop_adjustment"%3A{"value"%3A-4.9}}'
                  style:
                    id: 6b45fc16-6e59-438c-ae7a-57f6dcc8b09c
                    type: fill
                    source: 8c4810867c50ee006b11abf19876a750
                    source-layer: drr.dynamic_subnational_hhr
                    minzoom: 0
                    layout:
                      visibility: visible
                    paint:
                      fill-color:
                        type: interval
                        property: heat_health_risk_index
                        stops:
                          - - 16.88
                            - 'rgba(158, 1, 66, 1)'
                          - - 29.78
                            - 'rgba(249, 142, 82, 1)'
                          - - 43.71
                            - 'rgba(255, 255, 191, 1)'
                          - - 58.52
                            - 'rgba(137, 208, 165, 1)'
                          - - 72.71
                            - 'rgba(94, 79, 162, 1)'
                        default: 'rgba(0,0,0,0)'
                      fill-outline-color:
                        property: heat_health_risk_index
                        type: interval
                        stops:
                          - - 16.88
                            - 'rgba(52, 0, 0, 1)'
                          - - 29.78
                            - 'rgba(108, 23, 0, 1)'
                          - - 43.71
                            - 'rgba(125, 127, 70, 1)'
                          - - 58.52
                            - 'rgba(5, 85, 50, 1)'
                          - - 72.71
                            - 'rgba(0, 0, 47, 1)'
                        default: 'rgba(0,0,0,0)'
                      fill-opacity: 1
                  colormap_name: spectral
                  classification_method: q
        description: ''
      security:
        - Azure AD authentication: []
        - API access token: []
    delete:
      summary: Delete default layer style for a dataset
      operationId: delete-datasets-id-style-type
      responses:
        '204':
          description: No Content
      description: |-
        This endpoint is to update the default layer style for specified dataset

        **This endpoint only can be used by the dataset owner or super user.**
      tags:
        - datasets
      security:
        - Azure AD authentication: []
        - API access token: []
  '/datasets/{id}/preview/style.json':
    parameters:
      - $ref: '#/components/parameters/dataset_id'
    get:
      summary: Get Maplibre style.json for preview map
      tags:
        - datasets
      responses: {}
      operationId: get-datasets-id-preview-style.json
      description: |-
        This endpoint is to create a style.json with default style for the dataset preview.

        If `type` is not specified, the layer type will be assumed by the geometry type of the layer.

        If `layer` is not specified, the first layer (if vector) or the first band (if raster) will be used.
      parameters:
        - $ref: '#/components/parameters/maplibre_layer_type_optional'
        - $ref: '#/components/parameters/maplibre_layer_id_optional'
  '/datasets/{id}/preview/auto/{width}x{height}.{format}':
    parameters:
      - $ref: '#/components/parameters/dataset_id'
      - $ref: '#/components/parameters/width'
      - $ref: '#/components/parameters/height'
      - $ref: '#/components/parameters/format'
    get:
      summary: Get a preview image for the dataset by using the default location
      tags:
        - datasets
      responses: {}
      operationId: get-datasets-id-preview-auto
      description: This endpoint is to create a preview image for the dataset. The default location saved in the dataset will be used automatically.
      parameters:
        - $ref: '#/components/parameters/maplibre_layer_id_optional'
        - $ref: '#/components/parameters/maplibre_layer_type_optional'
  '/datasets/{id}/preview/{bbox}/{width}x{height}.{format}':
    parameters:
      - $ref: '#/components/parameters/dataset_id'
      - $ref: '#/components/parameters/bbox'
      - $ref: '#/components/parameters/width'
      - $ref: '#/components/parameters/height'
      - $ref: '#/components/parameters/format'
    get:
      summary: Get a preview image for the dataset by using specific BBOX
      tags:
        - datasets
      responses: {}
      operationId: get-datasets-id-preview-bbox
      description: This endpoint is to create a preview image for the dataset by specifing the BBOX boundary
      parameters:
        - $ref: '#/components/parameters/maplibre_layer_id_optional'
        - $ref: '#/components/parameters/maplibre_layer_type_optional'
  '/datasets/{id}/preview/{lon},{lat},{zoom},{bearing},{pitch}/{width}x{height}.{format}':
    parameters:
      - $ref: '#/components/parameters/dataset_id'
      - $ref: '#/components/parameters/lon'
      - $ref: '#/components/parameters/lat'
      - $ref: '#/components/parameters/zoom'
      - $ref: '#/components/parameters/bearing'
      - $ref: '#/components/parameters/pitch'
      - $ref: '#/components/parameters/width'
      - $ref: '#/components/parameters/height'
      - $ref: '#/components/parameters/format'
    get:
      summary: Get a preview image for the dataset with manually specified parameters
      tags:
        - datasets
      responses: {}
      operationId: get-datasets-id-preview-lon-lat-zoom-bearing-pitch
      description: This endpoint is to create a preview image for the dataset with manually specified parameters
      parameters:
        - $ref: '#/components/parameters/maplibre_layer_id_optional'
        - $ref: '#/components/parameters/maplibre_layer_type_optional'
  /datasets/ingesting:
    get:
      summary: Get status of ingesting datasets
      tags:
        - datasets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                x-examples:
                  Example 1:
                    - raw:
                        name: Anthropogenic_Biomes_20230224163255.tif
                        url: 'https://undpgeohub.blob.core.windows.net/userdata/a85516c81c0b78d3e89d3f00099b8b15/raw/Anthropogenic_Biomes_20230224163255.tif?sv=2021-10-04&ss=b&srt=o&se=2023-02-24T19%3A58%3A12Z&sp=r&sig=bCEjmWyg2ggSLrF0%2FwNVVTujRjM7Wi8rb3b9zpVpNpU%3D'
                        contentLength: 832784
                        createdat: '2023-02-24T16:32:58.000Z'
                        updatedat: '2023-02-24T16:32:58.000Z'
                        error: 'https://undpgeohub.blob.core.windows.net/userdata/a85516c81c0b78d3e89d3f00099b8b15/raw/Anthropogenic_Biomes_20230224163255.tif.error?sv=2021-10-04&ss=b&srt=o&se=2023-02-24T19%3A58%3A12Z&sp=r&sig=bCEjmWyg2ggSLrF0%2FwNVVTujRjM7Wi8rb3b9zpVpNpU%3D'
                    - raw:
                        name: admin0_20230224161338.pmtiles
                        url: 'https://undpgeohub.blob.core.windows.net/userdata/a85516c81c0b78d3e89d3f00099b8b15/raw/admin0_20230224161338.pmtiles?sv=2021-10-04&ss=b&srt=o&se=2023-02-24T19%3A58%3A12Z&sp=r&sig=bCEjmWyg2ggSLrF0%2FwNVVTujRjM7Wi8rb3b9zpVpNpU%3D'
                        contentLength: 11813331
                        createdat: '2023-02-24T16:14:14.000Z'
                        updatedat: '2023-02-24T16:14:14.000Z'
                      datasets:
                        - name: admin0_20230224161338.pmtiles
                          url: 'https://undpgeohub.blob.core.windows.net/userdata/a85516c81c0b78d3e89d3f00099b8b15/datasets/admin0_20230224161338.pmtiles/admin0_20230224161338.pmtiles?sv=2021-10-04&ss=b&srt=o&se=2023-02-24T19%3A58%3A12Z&sp=r&sig=bCEjmWyg2ggSLrF0%2FwNVVTujRjM7Wi8rb3b9zpVpNpU%3D'
                          contentLength: 11813331
                          createdat: '2023-02-24T16:19:35.000Z'
                          updatedat: '2023-02-24T16:19:35.000Z'
                          processing: true
                items:
                  type: object
                  properties:
                    raw:
                      type: object
                      required:
                        - name
                        - url
                        - contentLength
                        - createdat
                        - updatedat
                      properties:
                        name:
                          type: string
                        url:
                          type: string
                        contentLength:
                          type: integer
                        createdat:
                          type: string
                        updatedat:
                          type: string
                        error:
                          type: string
                    datasets:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                          url:
                            type: string
                          contentLength:
                            type: integer
                          createdat:
                            type: string
                          updatedat:
                            type: string
                          processing:
                            type: boolean
                        required:
                          - name
                          - url
                          - contentLength
                          - createdat
                          - updatedat
                          - processing
                  required:
                    - raw
              examples:
                Example:
                  value:
                    - raw:
                        name: string
                        url: string
                        contentLength: 0
                        createdat: string
                        updatedat: string
                        error: string
                      datasets:
                        - name: string
                          url: string
                          contentLength: 0
                          createdat: string
                          updatedat: string
                          processing: true
      operationId: get-datasets-ingesting
      description: |-
        This endpoint is going to scan data upload folder for login user to check the status of ingesting datasets.Authentication is required prior to using this API.

        URLs will be attached SAS token (1 hour expiry period)

        User's upload folder structure will be like this.

        - userdata
          - a85516c81c0b78d3e89d3f00099b8b15 (md5 hash key generated from email)
            - raw
              - aaa_yyyymmddhhmmss.tif - original data
              - aaa_yyyymmddhhmmss.tif.error - in case data processing failed. Logs for data processing should be contained in .error file 
            - datasets
              - aaa_yyyymmddhhmmss.tif - subfolder
                - aaa_yyyymmddhhmmss.tif - processed data
                - aaa_yyyymmddhhmmss.tif.ingesting - processing end, but unpublished
      security:
        - Azure AD authentication: []
        - API access token: []
      parameters:
        - schema:
            type: string
            default: createdat
            enum:
              - name
              - contentLength
              - createdat
              - updatedat
          in: query
          name: sortby
          description: Sorting column
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          in: query
          name: sortorder
          description: Sorting order either 'asc' or 'desc'
  /datasets/stats:
    get:
      summary: Get statistics for published datasets
      tags:
        - datasets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    stats:
                      type: string
                    title:
                      type: string
                    description:
                      type: string
              examples:
                Example:
                  value:
                    - stat: '4384'
                      title: Public datasets
                      description: The number of public datasets
                    - stat: '91'
                      title: Country datasets
                      description: The number of public datasets linked to at least a country
                    - stat: '4164'
                      title: Global datasets
                      description: The number of public global datasets
                    - stat: '4337'
                      title: SDG datasets
                      description: The number of public datasets linked to at least a SDG
                    - stat: '27'
                      title: Countries
                      description: The number of countries having GeoHub datasets
      operationId: get-datasets-stats
      description: This endpoint is to get statistics for published datasets
  /style:
    get:
      summary: Style list API
      tags:
        - style
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  styles:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        createdat:
                          type: string
                        name:
                          type: string
                        updatedat:
                          type: string
                        access_level:
                          type: integer
                          default: 1
                          description: '1: login user, 2: UNDP, 3: public'
                        created_user:
                          type: string
                        updated_user:
                          type: string
                        no_stars:
                          type: integer
                        is_star:
                          type: boolean
                        links:
                          type: array
                          items:
                            $ref: '#/components/schemas/Link'
                      required:
                        - id
                        - createdat
                        - name
                        - updatedat
                        - access_level
                        - links
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
                  pages:
                    type: object
                    properties:
                      totalCount:
                        type: integer
                      totalPages:
                        type: integer
                      currentPage:
                        type: integer
                required:
                  - styles
                  - links
              examples:
                Example:
                  value:
                    styles:
                      - id: 201
                        name: Cross Blended Hypso with Shaded Relief and Water
                        access_level: 1
                        createdat: '2023-03-20T18:58:13.443Z'
                        created_user: jin.igarashi@undp.org
                        updatedat: '2023-03-20T18:58:13.443Z'
                        updated_user: null
                        no_stars: 5
                        is_star: true
                        links:
                          - rel: root
                            type: application/json
                            href: 'http://localhost:5173/api/style'
                          - rel: self
                            type: application/json
                            href: 'http://localhost:5173/api/style/201'
                          - rel: map
                            type: application/json
                            href: 'http://localhost:5173/map/201'
                          - rel: stylejson
                            type: application/json
                            href: 'http://localhost:5173/api/style/201.json'
                    links:
                      - rel: root
                        type: application/json
                        href: 'http://localhost:5173/api/style'
                      - rel: self
                        type: application/json
                        href: 'http://localhost:5173/api/style?limit=1'
                      - rel: next
                        type: application/json
                        href: 'http://localhost:5173/api/style?limit=1&offset=1'
                    pages:
                      totalCount: 9
                      totalPages: 9
                      currentPage: 1
      operationId: get-style
      description: Get the list of saved style from PostGIS database
      parameters:
        - schema:
            type: integer
          in: query
          name: limit
        - schema:
            type: integer
          in: query
          name: offset
        - schema:
            type: string
          in: query
          name: sortby
          description: "sorting column and sorting order. e.g., 'updatedat, desc'. if asc or desc is skipped, asc will be used."
        - schema:
            type: string
          in: query
          name: query
          description: text to search styles by name
        - schema:
            type: integer
            default: 1
            enum:
              - 1
              - 2
              - 3
          in: query
          name: accesslevel
          description: 'access Level published to 1: login user 2: UNDP 3: public'
        - schema:
            type: boolean
          in: query
          name: staronly
          description: 'if true, only search for favourite datasets'
        - schema:
            type: boolean
          in: query
          name: mydata
          description: 'If true, only search for maps which users own. Default is false'
      security:
        - Azure AD authentication: []
        - API access token: []
    post:
      summary: Style register API
      operationId: post-style
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  viewer:
                    type: string
                    description: URL for style sharing viewer
                  style:
                    type: string
                    description: style.json URL
                required:
                  - viewer
                  - style
      description: Save style.json to PostgreSQL database
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: name for style
                style:
                  type: object
                  description: style.json object
                layers:
                  type: array
                  description: $layerList object
                  items:
                    type: object
                access_level:
                  type: integer
                  enum:
                    - 1
                    - 2
                    - 3
                  description: '1: login user, 2: UNDP, 3: public'
              required:
                - name
                - style
                - layers
                - access_level
      tags:
        - style
      security:
        - Azure AD authentication: []
        - API access token: []
    put:
      summary: Style update API
      operationId: put-style
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  viewer:
                    type: string
                    description: URL for viewer
                  style:
                    type: string
                    description: style.json URL
                required:
                  - id
                  - viewer
                  - style
      description: Update style.json to PostgreSQL database
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: style id to update
                name:
                  type: string
                  description: name for saved style
                styles:
                  type: object
                  description: style.json object
                layers:
                  type: array
                  description: $layerList object
                  items:
                    type: object
                access_level:
                  type: integer
                  description: '1: login user, 2: UNDP, 3: public'
              required:
                - id
                - name
                - styles
                - layers
                - access_level
      tags:
        - style
      security:
        - Azure AD authentication: []
        - API access token: []
  '/style/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: style ID
    delete:
      summary: Style delete API
      operationId: delete-style-id
      responses:
        '204':
          description: No Content
      description: Delete style by ID
      tags:
        - style
      security:
        - Azure AD authentication: []
        - API access token: []
    get:
      summary: Style info API
      operationId: get-style-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  style:
                    type: object
                  layers:
                    type: array
                    items:
                      type: object
                  createdat:
                    type: string
                  updatedat:
                    type: string
                  access_level:
                    type: integer
                    description: '1: login user, 2: UNDP, 3: public'
                  created_user:
                    type: string
                  updated_user:
                    type: string
                  is_star:
                    type: boolean
                  links:
                    type: array
                    items:
                      $ref: '#/components/schemas/Link'
                required:
                  - id
                  - name
                  - style
                  - layers
                  - createdat
                  - updatedat
                  - access_level
                  - links
      description: get style information by style id
      tags:
        - style
      security:
        - Azure AD authentication: []
        - API access token: []
      parameters:
        - schema:
            type: string
            enum:
              - style
              - aerialstyle
              - positron
              - dark
              - blank
          in: query
          name: basemap
          description: Optional. Switch basemap to user desired style
        - schema:
            type: boolean
            default: 'false'
          in: query
          name: hillshade
          description: 'Optional. If true, enable hillshade layer in style'
        - schema:
            type: boolean
            default: 'false'
          in: query
          name: terrain
          description: 'Optional. If true, enable terrain in style'
  '/style/{id}.json':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: style ID
    get:
      summary: Style JSON api
      tags:
        - style
      responses:
        '200':
          description: style.json object
      operationId: get-style-id-.json
      description: get style.json by ID
      security:
        - Azure AD authentication: []
        - API access token: []
      parameters:
        - schema:
            type: boolean
            default: 'false'
          in: query
          name: exclude
          description: 'If true, exclude basemap layers from style.json'
        - schema:
            type: string
            enum:
              - style
              - aerialstyle
              - dark
              - positron
              - blank
          in: query
          name: basemap
          description: Optional. Switch basemap to user desired style
        - schema:
            type: boolean
            default: 'false'
          in: query
          name: hillshade
          description: 'Optional. If true, enable hillshade layer in style'
        - schema:
            type: boolean
            default: 'false'
          in: query
          description: 'Optional. If true, enable terrain in style'
  '/style/{id}/static/auto/{width}x{height}.{format}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: style id
      - $ref: '#/components/parameters/width'
      - $ref: '#/components/parameters/height'
      - $ref: '#/components/parameters/format'
    get:
      summary: Static image with default location
      tags:
        - style
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: object
                properties: {}
      operationId: get-style-id-static-auto-width-x-height-.png
      description: Get static image with default position of style.json
      parameters:
        - $ref: '#/components/parameters/ratio'
  '/style/{id}/static/{bbox}/{width}x{height}.{format}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: style ID
      - $ref: '#/components/parameters/bbox'
      - $ref: '#/components/parameters/width'
      - $ref: '#/components/parameters/height'
      - $ref: '#/components/parameters/format'
    get:
      summary: Static image by BBOX
      tags:
        - style
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: object
                properties: {}
        '':
          description: ''
      operationId: get-style-id-static-bbox-width-x-height-.png
      description: Get static image by specified BBOX
      parameters:
        - $ref: '#/components/parameters/ratio'
  '/style/{id}/static/{lon},{lat},{zoom},{bearing},{pitch}/{width}x{height}.{format}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: style id
      - $ref: '#/components/parameters/lon'
      - $ref: '#/components/parameters/lat'
      - $ref: '#/components/parameters/zoom'
      - $ref: '#/components/parameters/bearing'
      - $ref: '#/components/parameters/pitch'
      - $ref: '#/components/parameters/width'
      - $ref: '#/components/parameters/height'
      - $ref: '#/components/parameters/format'
    get:
      summary: Static image by center and zoom
      tags:
        - style
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: object
                properties: {}
      operationId: 'get-style-id-static-lon-,-lat-,-zoom-,-bearing-,-pitch-width-x-height-.png'
      description: 'get static image by center and zoom, and bearing and pitch optionally'
      parameters:
        - $ref: '#/components/parameters/ratio'
  /swagger/spec.json:
    get:
      summary: Get open API JSON definition
      responses: {}
      operationId: get-swagger-spec.json
      description: Get open API JSON definition
      tags:
        - swagger
components:
  schemas:
    Tag:
      title: Tag
      x-stoplight:
        id: um38sy7bphx89
      type: object
      properties:
        key:
          type: string
        value:
          type: string
        count:
          type: number
      required:
        - key
        - value
    QueryOperator:
      title: QueryOperator
      type: string
      enum:
        - and
        - or
    TagSearchOperator:
      title: TagSearchOperator
      type: string
      enum:
        - and
        - or
    SidebarPosition:
      title: SidebarPosition
      type: string
      enum:
        - left
        - right
    ClassificationMethodTypes:
      title: ClassificationMethodTypes
      type: string
      enum:
        - e
        - q
        - 'n'
        - l
    ResamplingMethodTypes:
      title: ResamplingMethodTypes
      type: string
      enum:
        - nearest
        - linear
    OverlapPriority:
      title: OverlapPriority
      type: string
      enum:
        - always
        - never
        - cooperative
    LinePattern:
      title: LinePattern
      type: string
      enum:
        - solid
        - dash
        - dash-dot
        - dot
    Link:
      title: Link
      x-stoplight:
        id: 758pae8gfhqq8
      type: object
      properties:
        rel:
          type: string
        type:
          type: string
        href:
          type: string
    GeoJSONFeature:
      type: object
      x-examples: {}
      description: GeoJSON feature object for GeoHub
      properties:
        type:
          type: string
        geometry:
          type: object
          properties:
            type:
              type: string
            coordinates:
              type: array
              items:
                type: number
        properties:
          type: object
          properties:
            id:
              type: string
            url:
              type: string
            name:
              type: string
            description:
              type: string
            is_raster:
              type: boolean
            license:
              type: string
            access_level:
              type: integer
            createdat:
              type: string
            created_user:
              type: string
            updatedat:
              type: string
            updated_user:
              type: string
            tags:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            no_stars:
              type: integer
            permission:
              type: integer
            is_star:
              type: boolean
            links:
              type: array
              items:
                $ref: '#/components/schemas/Link'
    GeoJSONFeatureCollection:
      type: object
      x-examples: {}
      description: GeoJSON FeatureCollection object for GeoHub
      properties:
        type:
          type: string
        features:
          type: array
          items:
            $ref: '#/components/schemas/GeoJSONFeature'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        pages:
          type: object
          properties:
            totalCount:
              type: integer
            totalPages:
              type: integer
            currentPage:
              type: integer
    DatasetLayerStyle:
      title: DatasetLayerStyle
      x-stoplight:
        id: 3edd696171c73
      type: object
      description: Dataset style definition
      x-examples: {}
      properties:
        dataset_id:
          type: string
          description: dataset ID
        layer_id:
          type: string
        layer_type:
          type: string
          description: 'Layer type. fill, line, symbol, circle, heatmap, raster'
        source:
          type: object
          description: Maplibre source object
        style:
          type: object
          description: Maplibre layer style object
        colormap_name:
          type: string
          description: Colormap name if applicable
        classification_method:
          type: string
          description: Classification method if applicable
        classification_method_2:
          type: string
          x-stoplight:
            id: s5ozu37b48b7z
          description: 'classification method if there are two classification settings (icon size, line width) apart from color.'
        createdat:
          type: string
        created_user:
          type: string
        updatedat:
          type: string
        updated_user:
          type: string
      required:
        - dataset_id
        - layer_id
        - layer_type
        - source
        - style
        - createdat
        - created_user
    stac:
      title: stac
      x-stoplight:
        id: 51hxmfzs5mtju
      type: object
      description: STAC API/Catalog object
      x-examples:
        API:
          id: microsoft-pc
          name: Microsoft Planetary Computer
          url: 'https://planetarycomputer.microsoft.com/api/stac/v1'
          type: api
        Catalog:
          id: maxar-opendata
          name: Maxar Open Data
          url: 'https://maxar-opendata.s3.amazonaws.com/events/catalog.json'
          type: catalog
          providers:
            - Maxar Technologies
      properties:
        id:
          type: string
          description: STAC ID
        name:
          type: string
          x-stoplight:
            id: v1jc6kp2gikli
          description: STAC name
        url:
          type: string
          x-stoplight:
            id: eyl8a37kvp6ga
          description: API URL or catalog.json URL
        type:
          type: string
          x-stoplight:
            id: uaal8dmp1wuao
          description: either 'api' or 'catalog'
        providers:
          type: array
          x-stoplight:
            id: ape451kvnptqq
          description: list of provider names
          items:
            x-stoplight:
              id: olhqv5auy83ir
            type: string
        createdat:
          type: string
          x-stoplight:
            id: 124oktg1ynf9h
        created_user:
          type: string
          x-stoplight:
            id: a1bmx85anum4o
        updatedat:
          type: string
          x-stoplight:
            id: 2dgcrqaraoc0k
        updated_user:
          type: string
          x-stoplight:
            id: hscqetpry1rqr
      required:
        - id
        - name
        - url
        - type
        - createdat
        - created_user
  parameters:
    lon:
      name: lon
      in: path
      required: true
      schema:
        type: number
        default: 0
      description: longitude
    lat:
      name: lat
      in: path
      required: true
      schema:
        type: number
        default: 0
      description: latitude
    zoom:
      name: zoom
      in: path
      required: true
      schema:
        type: number
        default: 0
        minimum: 0
        maximum: 22
      description: zoom level
    width:
      name: width
      in: path
      required: true
      schema:
        type: integer
        default: 300
      description: image width (pixel)
    height:
      name: height
      in: path
      required: true
      schema:
        type: number
        default: 200
      description: image height (pixel)
    bbox:
      name: bbox
      in: path
      required: true
      schema:
        type: string
        example: '-4.04296875,-15.114552871944102,48.69140625,19.476950206488414'
      description: 'bbox (minx, miny, maxx, maxy)'
    bearing:
      name: bearing
      in: path
      required: true
      schema:
        type: number
        default: 0
      description: bearing
    pitch:
      name: pitch
      in: path
      required: true
      schema:
        type: number
        default: 0
      description: pitch
    format:
      name: format
      in: path
      required: true
      schema:
        type: string
        default: png
        enum:
          - png
          - jpeg
          - webp
      description: 'Supported format (jpeg, png, webp)'
    ratio:
      name: ratio
      in: query
      required: false
      schema:
        type: integer
        enum:
          - 1
          - 2
        default: 1
      description: ratio. either 1 or 2. Default is 1
    dataset_id:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Dataset ID
    maplibre_layer_type:
      name: type
      in: path
      required: true
      schema:
        type: string
        enum:
          - fill
          - line
          - symbol
          - circle
          - heatmap
          - fill-extrusion
          - raster
      description: 'Maplibre layer type (fill, line, symbol, circle, heatmap, raster)'
    maplibre_layer_id:
      name: layer
      in: path
      required: true
      schema:
        type: string
      description: 'Band name if it is raster, layer ID if it is vector.'
    maplibre_layer_id_optional:
      name: layer
      in: query
      required: false
      schema:
        type: string
      description: 'Band name if it is raster, layer ID if it is vector.'
    maplibre_layer_type_optional:
      name: type
      in: query
      required: false
      schema:
        type: string
        enum:
          - fill
          - line
          - symbol
          - circle
          - heatmap
          - fill-extrusion
          - raster
      description: 'Maplibre layer type (fill, line, symbol, circle, heatmap, raster)'
    storymap_id:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Storymap UUID
  securitySchemes:
    Azure AD authentication:
      type: http
      scheme: oauth
      description: Access to /auth/signin to sign in to Azure AD with your UNDP account.
    API access token:
      name: token
      type: apiKey
      in: query
  responses: {}
