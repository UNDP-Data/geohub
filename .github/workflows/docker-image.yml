name: Docker Image CI

on:
  push:
    branches: ["develop"]
  pull_request:
    workflow_dispatch:

env:
  PATH_MOUNT: /workspaces/myapp
  PATH_CACHE: /tmp/docker-img-arch
  REGISTRY: ghcr.io
  IMAGE_NAME: undp-data/geohub
  AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
  AZURE_STORAGE_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}
  AZURE_STORAGE_ACCOUNT_UPLOAD: ${{ secrets.AZURE_STORAGE_ACCOUNT_UPLOAD }}
  AZURE_STORAGE_ACCESS_KEY_UPLOAD: ${{ secrets.AZURE_STORAGE_ACCESS_KEY_UPLOAD }}
  DATABASE_CONNECTION: ${{ secrets.DATABASE_CONNECTION }}
  MARTIN_API_ENDPOINT: ${{ secrets.MARTIN_API_ENDPOINT }}
  PGTILESERV_API_ENDPOINT: ${{ secrets.PGTILESERV_API_ENDPOINT }}
  TITILER_ENDPOINT: ${{ secrets.TITILER_ENDPOINT }}
  AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
  AZURE_AD_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
  AZURE_AD_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
  AZURE_AD_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
  AZURE_SERVICE_BUS_CONNECTIONSTRING: ${{ secrets.AZURE_SERVICE_BUS_CONNECTIONSTRING }}
  AZURE_SERVICE_BUS_QUEUE_NAME: ${{ secrets.AZURE_SERVICE_BUS_QUEUE_NAME }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create image tag
        id: imagetag
        run: |
          HASH_IMAGE=${{ hashFiles('./Dockerfile') }}
          VARIANT=$(TZ=UTC-9 date '+%Y%m')${HASH_IMAGE:0:7}
          NAME_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          TAG="${NAME_IMAGE}:${VARIANT}"
          NAME_TAR="${NAME_IMAGE}.${VARIANT}.tar"
          PATH_TAR=${{ env.PATH_CACHE }}"/${NAME_TAR}"
          echo "::set-output name=TAG::${TAG}"
          echo "::set-output name=PATH_TAR::${PATH_TAR}"

      - name: Enable cache
        id: cache
        uses: actions/cache@v2
        with:
          path: ${{ env.PATH_CACHE }}
          key: ${{ steps.imagetag.outputs.TAG }}

      - name: Load Docker image if exists
        if: steps.cache.outputs.cache-hit == 'true'
        run: docker load --input ${{ steps.imagetag.outputs.PATH_TAR }}

      - name: Build the Docker image
        run: |
          IMAGE_NAME=${{ steps.imagetag.outputs.TAG }} ./docker-build.sh
          docker save --output ${{ steps.imagetag.outputs.PATH_TAR }} ${{ steps.imagetag.outputs.TAG }}
