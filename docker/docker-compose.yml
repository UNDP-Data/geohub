version: "3"

volumes:
  database:

services:
  geohub:
    image: undp-data/geohub:latest
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
    # restart: unless-stopped
    container_name: geohub
    # ports:
    #   - "5173:5173"
    environment:
      # editable in .env
      - MARTIN_API_ENDPOINT=${MARTIN_API_ENDPOINT:-''}
      - PGTILESERV_API_ENDPOINT=${PGTILESERV_API_ENDPOINT:-''}
      - TITILER_ENDPOINT=${TITILER_ENDPOINT:-'http://cogserver/cog'}
      - AZURE_STORAGE_ACCOUNT=${AZURE_STORAGE_ACCOUNT:-''}
      - AZURE_STORAGE_ACCOUNT_UPLOAD=${AZURE_STORAGE_ACCOUNT_UPLOAD:-''}
      - AZURE_STORAGE_ACCESS_KEY_UPLOAD=${AZURE_STORAGE_ACCESS_KEY_UPLOAD:-''}
      - AZURE_SERVICE_BUS_CONNECTIONSTRING=${AZURE_SERVICE_BUS_CONNECTIONSTRING:-''}
      - AZURE_SERVICE_BUS_QUEUE_NAME=${AZURE_SERVICE_BUS_QUEUE_NAME:-''}
      - DATABASE_CONNECTION=${DATABASE_CONNECTION:-''}
      - AUTH_SECRET=${AUTH_SECRET:-''}
      - AZURE_AD_B2C_TENANT_ID=${AZURE_AD_TENANT_ID:-''}
      - AZURE_AD_B2C_CLIENT_ID=${AZURE_AD_CLIENT_ID:-''}
      - AZURE_AD_B2C_CLIENT_SECRET=${AZURE_AD_CLIENT_SECRET:-''}
      - AZURE_AD_B2C_APP_NAME=${AZURE_AD_B2C_APP_NAME:-''}
      - GEOHUB_GITHUB_ID=${GEOHUB_GITHUB_ID:-''}
      - GEOHUB_GITHUB_SECRET=${GEOHUB_GITHUB_SECRET:-''}
      - AZURE_PUBSUB_CONNECTIONSTRING=${AZURE_PUBSUB_CONNECTIONSTRING:-''}
      - AZURE_PUBSUB_GROUP_DATA_PIPELINE=${AZURE_PUBSUB_GROUP_DATA_PIPELINE:-'datapipeline'}
      - GEOHUB_STATIC_IMAGE_API=${GEOHUB_STATIC_IMAGE_API:-'https://staticimage.undpgeohub.org/api'}
      - GEOHUB_DOCS_ENDPOINT=${GEOHUB_DOCS_ENDPOINT:-''}
      - SVELTE_UNDP_DESIGN_ENDPOINT=${SVELTE_UNDP_DESIGN_ENDPOINT:-''}
      - SVELTE_UNDP_COMPONENTS_ENDPOINT=${SVELTE_UNDP_COMPONENTS_ENDPOINT:-''}
      - GEOHUB_API_ENDPOINT=${GEOHUB_API_ENDPOINT:-'https://dev.undpgeohub.org'}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-'test-secret-key'}
    volumes:
      - ../sites/geohub:/app/sites/geohub
      - ../packages:/app/packages
    # entrypoint: pnpm --filter="./sites/geohub" dev --host

  db:
    image: kartoza/postgis:14-3.1
    container_name: "geohub_db"
    volumes:
      - database:/var/lib/postgresql/14
    environment:
      - ALLOW_IP_RANGE=0.0.0.0/0
      - POSTGRES_DBNAME=${DATABASE_NAME:-geodata}
      - POSTGRES_USER=${DATABASE_USERNAME:-docker}
      - POSTGRES_PASS=${DATABASE_PASSWORD:-docker}
    restart: on-failure:5
    ports:
      - 25432:5432

  cogserver:
    image: ghcr.io/undp-data/cogserver:v0.2.1
    container_name: cogserver
    restart: unless-stopped
    ports:
      - 8000:80
    environment:
      #Application
      - HOST=0.0.0.0
      - PORT=80
      ## Uvicorn
      ## http://www.uvicorn.org/settings/#production
      - WEB_CONCURRENCY=2
      ## GDAL config
      - CPL_TMPDIR=/tmp
      - GDAL_CACHEMAX=75%
      - GDAL_INGESTED_BYTES_AT_OPEN=32768
      - GDAL_DISABLE_READDIR_ON_OPEN=EMPTY_DIR
      - GDAL_HTTP_MERGE_CONSECUTIVE_RANGES=YES
      - GDAL_HTTP_MULTIPLEX=YES
      - GDAL_HTTP_VERSION=2
      - PYTHONWARNINGS=ignore
      - VSI_CACHE=TRUE
      - VSI_CACHE_SIZE=5000000
      ## rio-tiler config
      - RIO_TILER_MAX_THREADS=1

  pg_tileserv:
    image: pramsey/pg_tileserv:20240312
    container_name: pg_tileserv
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_CONNECTION:-'postgres://docker:docker@geohub_db:5432/geodata?sslmode=disable'}
    ports:
      - 7800:7800

  static_image_api:
    image: ghcr.io/undp-data/geohub-static-image-api:develop
    # enable the below comment if want to use production image from ACR (requires authentication)
    # image: undpgeohub.azurecr.io/geohub-static-image-api:develop
    platform: linux/amd64
    container_name: static_image_api
    restart: unless-stopped
    ports:
      - 9000:3000
    volumes:
      ## entrypoint.sh in original one from Docker image does not work with this docker-compose.
      ## overwrite entrypoint.sh for static api in docker-compose.
      - ./static-api-entrypoint.sh:/app/entrypoint.sh
    entrypoint: /app/entrypoint.sh
